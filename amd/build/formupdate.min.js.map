{"version":3,"sources":["../src/formupdate.js"],"names":["handleChange","contextid","library","e","target","closest","form","stopPropagation","preventDefault","updateForm","data","formdata","FormData","params","plugin","window","onbeforeunload","forEach","value","key","jsonformdata","JSON","stringify","Fragment","loadFragment","done","html","js","document","removeEventListener","bind","templates","replaceNodeContents","parentNode","insertBefore","firstChild","remove","fail","notification","exception","init","addEventListener"],"mappings":"6MAAA,OACA,OACA,O,sDAsBMA,CAAAA,CAAY,CAAG,SAACC,CAAD,CAAYC,CAAZ,CAAqBC,CAArB,CAA2B,CAC5C,GAAIA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiB,uFAAjB,CAAJ,CAA6G,CACzG,GAAIC,CAAAA,CAAI,CAAGH,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiB,MAAjB,CAAX,CACAF,CAAC,CAACI,eAAF,GACAJ,CAAC,CAACK,cAAF,GACAC,CAAU,CAACR,CAAD,CAAYC,CAAZ,CAAqBI,CAArB,CACb,CACJ,C,CASKG,CAAU,CAAG,SAACR,CAAD,CAAYC,CAAZ,CAAqBI,CAArB,CAA8B,CACzC,GAAII,CAAAA,CAAI,CAAG,EAAX,CACIC,CAAQ,CAAG,GAAIC,CAAAA,QAAJ,CAAaN,CAAb,CADf,CAEIO,CAAM,CAAG,CACLZ,SAAS,CAAEA,CADN,CAELC,OAAO,CAAEA,CAFJ,CAGLY,MAAM,CAAE,WAHH,CAFb,CAQAC,MAAM,CAACC,cAAP,CAAwB,IAAxB,CAEAL,CAAQ,CAACM,OAAT,CAAiB,SAACC,CAAD,CAAQC,CAAR,CAAgB,CAC7BT,CAAI,CAACS,CAAD,CAAJ,CAAYD,CACf,CAFD,EAGAL,CAAM,CAACO,YAAP,CAAsBC,IAAI,CAACC,SAAL,CAAeZ,CAAf,CAAtB,CAEAa,UAASC,YAAT,CAAsB,uBAAtB,CAA+C,YAA/C,CAA6DvB,CAA7D,CAAwEY,CAAxE,EAAgFY,IAAhF,CAAqF,SAASC,CAAT,CAAeC,CAAf,CAAmB,CACpGC,QAAQ,CAACC,mBAAT,CAA6B,QAA7B,CAAuCpB,CAAU,CAACqB,IAAX,CAAgBf,MAAhB,CAAwBd,CAAxB,CAAmCC,CAAnC,CAAvC,EACA6B,UAAUC,mBAAV,CAA8B1B,CAA9B,CAAoCoB,CAApC,CAA0CC,CAA1C,EACArB,CAAI,CAAC2B,UAAL,CAAgBC,YAAhB,CAA6B5B,CAAI,CAAC6B,UAAlC,CAA8C7B,CAA9C,EACAA,CAAI,CAAC8B,MAAL,EACH,CALD,EAKGC,IALH,CAKQC,UAAaC,SALrB,CAMP,C,WAEc,CACXC,IAAI,CAvDK,QAAPA,CAAAA,IAAO,CAACvC,CAAD,CAAYC,CAAZ,CAAwB,CAGjC0B,QAAQ,CAACC,mBAAT,CAA6B,QAA7B,CAAuC7B,CAAY,CAAC8B,IAAb,CAAkBf,MAAlB,CAA0Bd,CAA1B,CAAqCC,CAArC,CAAvC,EACA0B,QAAQ,CAACa,gBAAT,CAA0B,QAA1B,CAAoCzC,CAAY,CAAC8B,IAAb,CAAkBf,MAAlB,CAA0Bd,CAA1B,CAAqCC,CAArC,CAApC,CACH,CAiDc,CAEXO,UAAU,CAAEA,CAFD,C","sourcesContent":["import Fragment from 'core/fragment';\nimport notification from 'core/notification';\nimport templates from 'core/templates';\n\n/**\n * Initialize listeners\n *\n * @param {int} contextid Context id of content bank\n * @param {string} library Library identifier\n */\nconst init = (contextid, library) => {\n    'use strict';\n\n    document.removeEventListener('change', handleChange.bind(window, contextid, library));\n    document.addEventListener('change', handleChange.bind(window, contextid, library));\n};\n\n/**\n * Update form from change event\n *\n * @param {int} contextid Context id of content bank\n * @param {string} library Library identifier\n * @param {event} e Event\n */\nconst handleChange = (contextid, library, e) => {\n    if (e.target.closest('form #id_category, form #id_recurse, form #id_question, form [data-action=\"update\"]')) {\n        let form = e.target.closest('form');\n        e.stopPropagation();\n        e.preventDefault();\n        updateForm(contextid, library, form);\n    }\n};\n\n/**\n * Update the form\n *\n * @param {int} contextid Context id of content bank\n * @param {string} library Library identifier\n * @param {DOMNode} form Form element to be updated\n */\nconst updateForm = (contextid, library, form) => {\n        let data = {},\n            formdata = new FormData(form),\n            params = {\n                contextid: contextid,\n                library: library,\n                plugin: 'repurpose'\n            };\n\n        window.onbeforeunload = null;\n\n        formdata.forEach((value, key) => {\n            data[key] = value;\n        });\n        params.jsonformdata = JSON.stringify(data);\n\n        Fragment.loadFragment('contenttype_repurpose', 'formupdate', contextid, params).done(function(html, js) {\n            document.removeEventListener('change', updateForm.bind(window, contextid, library));\n            templates.replaceNodeContents(form, html, js);\n            form.parentNode.insertBefore(form.firstChild, form);\n            form.remove();\n        }).fail(notification.exception);\n};\n\nexport default {\n    init: init,\n    updateForm: updateForm\n};\n"],"file":"formupdate.min.js"}